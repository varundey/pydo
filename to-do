#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os.path
import sqlite3
import __main__ as main

# Global variables for DB
db = sqlite3.connect('tasker.db')
db.text_factory = str
cur = db.cursor()
cur.execute('create table if not exists TODOLIST (id INTEGER PRIMARY KEY, ToDo TEXT)')

# Global variables for command line arguments
arg_len = len(sys.argv)
file_path = main.__file__

class ToDo(object):
	"""docstring for ToDoList"""
	def __init__(self):
		pass
		
	def addTask(self, id_no, task):
		toDo=[(id_no, task),]
		cur.executemany("insert into TODOLIST values (?, ?)", toDo)
		db.commit()
		print toDo[0][1]+" successfully added in your to-do list!"

	def done(self):
		if getLength()==0:
			print "Umm.. You need to create a to-do first "\
					"before marking them as done."
		else:
			remove_id = raw_input("Enter id no of done item: ")
			done_task = cur.execute("select ToDo from TODOLIST where id = (?)", remove_id).fetchone()[0]
			cur.execute("delete from TODOLIST where id = (?)", remove_id)
			db.commit()
			print done_task+" successfully marked as done!"


	def view(self):
		if getLength()==0:
			print "No to-do list found. Create one with 'to-do'"
		else:
			cur.execute('select * from TODOLIST')
			results = cur.fetchall()
			print "Your to-do list contains following tasks:"
			for item in results:
				print item

	def throw(self):
		print "Preparing to fold your list and throw it in bin....."
		cur.execute("drop table TODOLIST")
		# Amen!
		print "Done!"

def short():
	return "Looks like your to-do list is empty. Try adding some items before doing this operation!"

def does_not_match(no):

	try:
		if (no == str(cur.execute("select * from TODOLIST where id = (?)",no).fetchall()[0][0]) ) is True:
			return False
	except Exception as e:
		return True

def fetchTask(no):
	task = cur.execute("select ToDo from TODOLIST where id = (?)",no)
	task = task.fetchone()[0]
	return task

def main(toDo, length):
	
	if arg_len==1 and sys.argv[0] == file_path:
		
		try:
			id_no, task = raw_input().split(",",1)

			if does_not_match(id_no) is True:			# If there does not exists a task with same id number
				
				if task.strip() != "":					# Empty task... lazylord
					toDo.addTask(id_no, task.strip())
				else:
					print "C'mon! Don't be that lazy..."
			
			else:
				print "Uh oh! Looks like the id you entered is assigned for " \
				 		+fetchTask(id_no)+". Try giving a unique id."	
		
		except Exception as e:
			print "That didn't work! Try entering in following format:"\
					"\n1, water the plants"
		
		return											# Parting apart!


	elif arg_len==2:	
		'''	Other arguments '''
		if (sys.argv)[1]=="--v" or (sys.argv)[1]=="-view":
			toDo.view()

		if (sys.argv)[1]=="--d" or (sys.argv)[1]=="-done":
			toDo.done()

		if (sys.argv)[1]=="--t" or (sys.argv)[1]=="-throw":
			toDo.throw()

		else:
			print "Confused? Worry not. Check 'todo --man'"	

	else:
		print "Confused? Worry not. Check 'todo --man'"	

def getLength():
	length = cur.execute('SELECT count(*) FROM TODOLIST')
	return length.fetchall()[0][0]

if __name__=="__main__":

	# Make an object of our ToDoList Class
	toDo = ToDo()
	
	length = getLength()	

	main(toDo, length)